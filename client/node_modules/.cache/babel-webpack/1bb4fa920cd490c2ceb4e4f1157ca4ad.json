{"ast":null,"code":"import _asyncToGenerator from \"/Users/kaivandenbroek/Development/DatingApp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.hubUrl = environment.hubUrl;\n    this.messageThreadSource = new BehaviorSubject([]);\n    this.messageThread$ = this.messageThreadSource.asObservable();\n  }\n\n  createHubconnection(user, otherUsername) {\n    this.hubConnection = new HubConnectionBuilder().withUrl(this.hubUrl + 'message?user=' + otherUsername, {\n      accessTokenFactory: () => user.token\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(error => console.log(error));\n    this.hubConnection.on('ReceiveMessageThread', messages => {\n      this.messageThreadSource.next(messages);\n    });\n    this.hubConnection.on('newMessage', message => {\n      this.messageThread$.pipe(take(1)).subscribe(messages => {\n        this.messageThreadSource.next([...messages, message]);\n      });\n    });\n  }\n\n  stopHubConnection() {\n    if (this.hubConnection) {\n      this.hubConnection.stop();\n    }\n  }\n\n  getMessages(pageNumber, pageSize, container) {\n    let params = getPaginationHeaders(pageNumber, pageSize);\n    params = params.append('Container', container);\n    return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\n  }\n\n  getMessageThread(username) {\n    return this.http.get(this.baseUrl + 'messages/thread/' + username);\n  }\n\n  sendMessage(username, content) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        return yield _this.hubConnection.invoke('SendMessage', {\n          recipientUsername: username,\n          content\n        });\n      } catch (error) {\n        return console.log(error);\n      }\n    })();\n  }\n\n  deleteMessage(id) {\n    return this.http.delete(this.baseUrl + 'messages/' + id);\n  }\n\n}\n\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/kaivandenbroek/Development/DatingApp/client/src/app/_services/message.service.ts"],"names":["HubConnectionBuilder","BehaviorSubject","take","environment","getPaginatedResult","getPaginationHeaders","i0","i1","MessageService","constructor","http","baseUrl","apiUrl","hubUrl","messageThreadSource","messageThread$","asObservable","createHubconnection","user","otherUsername","hubConnection","withUrl","accessTokenFactory","token","withAutomaticReconnect","build","start","catch","error","console","log","on","messages","next","message","pipe","subscribe","stopHubConnection","stop","getMessages","pageNumber","pageSize","container","params","append","getMessageThread","username","get","sendMessage","content","invoke","recipientUsername","deleteMessage","id","delete","ɵfac","MessageService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n    constructor(http) {\n        this.http = http;\n        this.baseUrl = environment.apiUrl;\n        this.hubUrl = environment.hubUrl;\n        this.messageThreadSource = new BehaviorSubject([]);\n        this.messageThread$ = this.messageThreadSource.asObservable();\n    }\n    createHubconnection(user, otherUsername) {\n        this.hubConnection = new HubConnectionBuilder()\n            .withUrl(this.hubUrl + 'message?user=' + otherUsername, {\n            accessTokenFactory: () => user.token\n        })\n            .withAutomaticReconnect()\n            .build();\n        this.hubConnection.start().catch(error => console.log(error));\n        this.hubConnection.on('ReceiveMessageThread', messages => {\n            this.messageThreadSource.next(messages);\n        });\n        this.hubConnection.on('newMessage', message => {\n            this.messageThread$.pipe(take(1)).subscribe(messages => {\n                this.messageThreadSource.next([...messages, message]);\n            });\n        });\n    }\n    stopHubConnection() {\n        if (this.hubConnection) {\n            this.hubConnection.stop();\n        }\n    }\n    getMessages(pageNumber, pageSize, container) {\n        let params = getPaginationHeaders(pageNumber, pageSize);\n        params = params.append('Container', container);\n        return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\n    }\n    getMessageThread(username) {\n        return this.http.get(this.baseUrl + 'messages/thread/' + username);\n    }\n    async sendMessage(username, content) {\n        try {\n            return await this.hubConnection.invoke('SendMessage', { recipientUsername: username, content });\n        }\n        catch (error) {\n            return console.log(error);\n        }\n    }\n    deleteMessage(id) {\n        return this.http.delete(this.baseUrl + 'messages/' + id);\n    }\n}\nMessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient)); };\nMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}